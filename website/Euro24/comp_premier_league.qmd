---
title: "Comparison of different models on the Premier League 2019 dataset"
author: "Oliver DÃ¼rr"
format: 
  html:
    toc: true
    toc-title: "Table of Contents"
    toc-depth: 3
    fig-width: 6
    fig-height: 3
    code-fold: true
    code-tools: true
    mathjax: true
  # pdf:
  #   toc: true
  #   toc-title: "Table of Contents"
  # filters:
  #- webr
---

```{r, echo=FALSE, eval=TRUE, message=FALSE, warning=FALSE}
  library(tidyverse)
  library(kableExtra)
  set.seed(42)
```

The experiments take some time to run, therefore we used the R-Script to producte the results <https://github.com/oduerr/da/blob/master/website/Euro24/eval_performance_runner.R>.

## Loading the data
```{r, asis=TRUE}
  df = read.csv('~/Documents/GitHub/da/website/Euro24/eval_performance_premier_league_2019.csv')
  df %>% tail() %>% kable()
  df <- mutate(df, name = sub("^.*/", "", name))
  
  df_raw = read.csv('~/Documents/GitHub/da/website/Euro24/premierleague2019.csv')
  head(df_raw) %>% kable()
```


## Model Comparisons


```{r hier-vs-non, fig.width=8, fig.height=6, warning=FALSE, message=FALSE}
   # Assuming df is your dataframe
  df %>% filter(type == 'NLL_PRED') %>% 
    ggplot(aes(x = ntrain, y = res, color = name)) + 
    geom_line() + 
    geom_point() + 
    theme_minimal() + 
    labs(
      title = 'Comparison of different models on the Premier League 2019 dataset', 
      x = 'Number of training data', 
      y = 'Negative Log Likelihood'
    ) + 
    ylim(2.5, 4) +
    theme(legend.position = "bottom") +
    coord_cartesian(clip = "off") # Allow lines to go outside the plot area

```

### Observations
- Especially for small training data, the hierarchical model performs better than the non-hierarchical model. 
- The Correlated Dataset model performs slightly better than non-correlated one

- There is partically no difference in predictive performance when comparing the model with and without Cholesky decomposition. 

- The negative binomial model performs comparable to Poisson model.

- All models start to deteriorate at around 280 training data. This is due to the interruped season in 2019/2020 due to the COVID-19 pandemic.

## Comparison of predicted vs PSIS-LOO

```{r pred-vs-loo, fig.width=8, fig.height=6, warning=FALSE, message=FALSE}
  df %>% filter(type %in% c('NLL_PRED', 'NLL_PSIS', 'NLL_PRED_STAN')) %>%
    ggplot(aes(x = ntrain, y = res, color = type)) + 
    geom_line(aes(linetype = type)) + 
    geom_point() + 
    theme_minimal() + 
    labs(
      title = 'Comparison of different models on the Premier League 2019 dataset', 
      x = 'Number of training data', 
      y = 'Negative Log Likelihood'
    ) + 
    ylim(2.5, 4) +
    facet_wrap(~name) +
    theme(legend.position = "bottom") + 
    coord_cartesian(clip = "off") # Allow lines to go outside the plot area
```

 
### Observations
- For few training data, PSIS-LOO estimator is 

## Result NLLs


```{r nll, fig.width=8, fig.height=6, warning=FALSE, message=FALSE}
  df %>% 
    filter(type %in% c('NLL_RESULTS', 'NLL_BOOKIE')) %>%
    ggplot(aes(x = ntrain, y = res, color = type)) + 
    geom_line(aes(linetype = name)) + 
    geom_point() + 
    theme_minimal() + 
    labs(
      title = 'Comparison of different models on the Premier League 2019 dataset', 
      x = 'Number of training data', 
      y = 'Negative Log Likelihood'
    ) + 
    ylim(0.75, 1.5) +
    theme(legend.position = "bottom") + 
    coord_cartesian(clip = "off") # Allow lines to go outside the plot area
```

## Betting Returns
 

```{r betting, fig.width=8, fig.height=6, warning=FALSE, message=FALSE}
  df %>% 
    filter(type %in% c('BET_RETURN')) %>%
    ggplot(aes(x = ntrain, y = res, color = name)) + 
    geom_line(aes(linetype = name)) + 
    geom_point() + 
    theme_minimal() + 
    labs(
      title = 'Comparison of different models on the Premier League 2019 dataset', 
      x = 'Number of training data', 
      y = 'Betting Returns'
    ) + 
    #ylim(0.75, 1.5) +
    theme(legend.position = "bottom") + 
    coord_cartesian(clip = "off") # Allow lines to go outside the plot area
```


## Technical Details
 

```{r details, fig.width=8, fig.height=6, warning=FALSE, message=FALSE}
  df %>% 
    filter(type %in% c('MIN_SUM_PROB')) %>%
    ggplot(aes(x = ntrain, y = res, color = name)) + 
    geom_line(aes(linetype = name)) + 
    geom_point() + 
    theme_minimal() + 
    labs(
      title = 'Comparison of different models on the Premier League 2019 dataset', 
      x = 'Number of training data', 
      y = 'Sum of Probabilities from 0 to 10 goals (should be 1)'
    ) + 
    ylim(0.75, 1.01) +
    theme(legend.position = "bottom") + 
    coord_cartesian(clip = "off") # Allow lines to go outside the plot area
```
